/*
 * File: \HuaWeiJiShi\HJ44_Sodoku\sodoku_test.go                               *
 * Project: newcoder                                                           *
 * Created At: Tuesday, 2022/04/19 , 23:20:08                                  *
 * Author: elchn                                                               *
 * -----                                                                       *
 * Last Modified: Wednesday, 2022/04/20 , 11:09:16                             *
 * Modified By: elchn                                                          *
 * -----                                                                       *
 * HISTORY:                                                                    *
 * Date      	By	Comments                                                   *
 * ----------	---	---------------------------------------------------------  *
 */

package main

import (
	"fmt"
	"reflect"
	"testing"
)

func ExampleSodoku() {
	tests := []struct {
		nums [9][9]uint
		res  [9][9]uint
	}{
		{
			[9][9]uint{
				{0, 9, 2, 4, 8, 1, 7, 6, 3},
				{4, 1, 3, 7, 6, 2, 9, 8, 5},
				{8, 6, 7, 3, 5, 9, 4, 1, 2},
				{6, 2, 4, 1, 9, 5, 3, 7, 8},
				{7, 5, 9, 8, 4, 3, 1, 2, 6},
				{1, 3, 8, 6, 2, 7, 5, 9, 4},
				{2, 7, 1, 5, 3, 8, 6, 4, 9},
				{3, 8, 6, 9, 1, 4, 2, 5, 7},
				{0, 4, 5, 2, 7, 6, 8, 3, 1},
			},
			[9][9]uint{
				{5, 9, 2, 4, 8, 1, 7, 6, 3},
				{4, 1, 3, 7, 6, 2, 9, 8, 5},
				{8, 6, 7, 3, 5, 9, 4, 1, 2},
				{6, 2, 4, 1, 9, 5, 3, 7, 8},
				{7, 5, 9, 8, 4, 3, 1, 2, 6},
				{1, 3, 8, 6, 2, 7, 5, 9, 4},
				{2, 7, 1, 5, 3, 8, 6, 4, 9},
				{3, 8, 6, 9, 1, 4, 2, 5, 7},
				{9, 4, 5, 2, 7, 6, 8, 3, 1},
			},
		},
	}

	for _, test := range tests {
		res := Sodoku(test.nums)
		fmt.Printf("%v", res)
	}

	//Output:
	// 1
}

func TestSodoku(t *testing.T) {
	tests := []struct {
		nums [9][9]uint
		res  [9][9]uint
	}{
		{
			[9][9]uint{
				{0, 9, 2, 4, 8, 1, 7, 6, 3},
				{4, 1, 3, 7, 6, 2, 9, 8, 5},
				{8, 6, 7, 3, 5, 9, 4, 1, 2},
				{6, 2, 4, 1, 9, 5, 3, 7, 8},
				{7, 5, 9, 8, 4, 3, 1, 2, 6},
				{1, 3, 8, 6, 2, 7, 5, 9, 4},
				{2, 7, 1, 5, 3, 8, 6, 4, 9},
				{3, 8, 6, 9, 1, 4, 2, 5, 7},
				{0, 4, 5, 2, 7, 6, 8, 3, 1},
			},
			[9][9]uint{
				{5, 9, 2, 4, 8, 1, 7, 6, 3},
				{4, 1, 3, 7, 6, 2, 9, 8, 5},
				{8, 6, 7, 3, 5, 9, 4, 1, 2},
				{6, 2, 4, 1, 9, 5, 3, 7, 8},
				{7, 5, 9, 8, 4, 3, 1, 2, 6},
				{1, 3, 8, 6, 2, 7, 5, 9, 4},
				{2, 7, 1, 5, 3, 8, 6, 4, 9},
				{3, 8, 6, 9, 1, 4, 2, 5, 7},
				{9, 4, 5, 2, 7, 6, 8, 3, 1},
			},
		},
	}

	for _, test := range tests {
		if res := Sodoku(test.nums); !reflect.DeepEqual(res, test.res) {
			t.Errorf("Sodoku(%v) = %v,want %v", test.nums, res, test.res)

		}
	}

}
